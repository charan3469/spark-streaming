[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\Charan\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\Charan\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.5.7 (Oracle Corporation Java 11.0.13)
[debug]       Load.loadUnit: plugins took 73.8842ms
[debug]       Load.loadUnit: defsScala took 0.2095ms
[debug] [Loading] Scanning directory C:\Users\Charan\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\Charan\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 15.334 ms
[debug]           Load.resolveProject(global-plugins) took 42.591ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\Charan\.sbt\1.0\plugins, plugins: List(<none>))) took 86.6091ms
[debug] [Loading] Done in C:\Users\Charan\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 101.7941ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.2418ms
[debug]     Load.loadUnit(file:/C:/Users/Charan/.sbt/1.0/plugins/, ...) took 183.3997ms
[debug]   Load.apply: load took 537.2346ms
[debug]   Load.apply: resolveProjects took 5.5439ms
[debug]   Load.apply: finalTransforms took 44.8162ms
[debug]   Load.apply: config.delegates took 4.6876ms
[debug]   Load.apply: Def.make(settings)... took 532.8405ms
[debug]   Load.apply: structureIndex took 123.3265ms
[debug]   Load.apply: mkStreams took 2.0534ms
[info] loading global plugins from C:\Users\Charan\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 15500.0216ms
[debug]           Load.loadUnit: plugins took 40.8475ms
[debug]           Load.loadUnit: defsScala took 0.0051ms
[debug] [Loading] Scanning directory E:\SparkStreamingIDEA\SparkStreaming\project
[debug]             Load.loadUnit: mkEval took 13.4914ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in E:\SparkStreamingIDEA\SparkStreaming\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 2.8003 ms
[info] loading settings for project sparkstreaming-build from idea.sbt ...
[debug]               Load.resolveProject(sparkstreaming-build) took 12.4299ms
[debug]             Load.loadTransitive: finalizeProject(Project(id sparkstreaming-build, base: E:\SparkStreamingIDEA\SparkStreaming\project, plugins: List(<none>))) took 20.5263ms
[debug] [Loading] Done in E:\SparkStreamingIDEA\SparkStreaming\project, returning: (sparkstreaming-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 6285.6992ms
[debug]           Load.loadUnit: cleanEvalClasses took 12.8269ms
[debug]         Load.loadUnit(file:/E:/SparkStreamingIDEA/SparkStreaming/project/, ...) took 6340.9304ms
[debug]       Load.apply: load took 6342.7237ms
[debug]       Load.apply: resolveProjects took 0.1837ms
[debug]       Load.apply: finalTransforms took 12.1029ms
[debug]       Load.apply: config.delegates took 8.5087ms
[debug]       Load.apply: Def.make(settings)... took 295.496ms
[debug]       Load.apply: structureIndex took 67.3575ms
[debug]       Load.apply: mkStreams took 0.0038ms
[info] loading project definition from E:\SparkStreamingIDEA\SparkStreaming\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 9516.6825ms
[debug]     Load.loadUnit: defsScala took 0.0049ms
[debug] [Loading] Scanning directory E:\SparkStreamingIDEA\SparkStreaming
[debug]       Load.loadUnit: mkEval took 0.5519ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 2.6115 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 58.4975ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: E:\SparkStreamingIDEA\SparkStreaming, plugins: List(<none>))) took 63.5398ms
[debug] [Loading] Done in E:\SparkStreamingIDEA\SparkStreaming, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 4054.1595ms
[debug]     Load.loadUnit: cleanEvalClasses took 20.5846ms
[debug]   Load.loadUnit(file:/E:/SparkStreamingIDEA/SparkStreaming/, ...) took 13593.3105ms
[debug] Load.apply: load took 13596.4073ms
[debug] Load.apply: resolveProjects took 0.8718ms
[debug] Load.apply: finalTransforms took 65.2715ms
[debug] Load.apply: config.delegates took 1.5564ms
[debug] Load.apply: Def.make(settings)... took 234.1977ms
[debug] Load.apply: structureIndex took 87.3491ms
[debug] Load.apply: mkStreams took 0.0037ms
[info] set current project to SparkStreaming (in build file:/E:/SparkStreamingIDEA/SparkStreaming/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 57457 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 57457, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to SparkStreaming (in build file:/E:/SparkStreamingIDEA/SparkStreaming/)
[debug] > Exec(idea-shell, None, None)
